mimetypes={    "*":"application/octet-stream", # Any binary data    "txt":"text/plain",    "text":"text/plain",    "html":"text/html",    "htm":"text/html",    "css":"text/css",    "js":"application/javascript",    "json":"application/json",    "xml":"application/xml",    "dtd":"application/xml-dtd",    "pdf":"application/pdf",    "zip":"application/zip",    "gz":"application/gzip",    "gzip":"application/gzip",    "jpg":"image/jpeg",    "jpeg":"image/jpeg",    "gif":"image/gif",    "png":"image/png",    "svg":"image/svg+xml",    "aac":"audio/mp4",    "m4a":"audio/mp4",    "mp3":"audio/mpeg",    "ogg":"audio/ogg",    "wav":"audio/vnd.wave",    "mp4":"video/mp4",    "webm":"video/webm",    "webp":"image/webp"    }# Refrance as:# http://www.wikipedia.org# http://www.iana.org/# fxcat 2015-05-11status = {    # Request generally successed    200:("200 OK",None),    # Request success in another source    201:("201 Created",None),    # Request accepted and it in process at another source    202:("202 Accepted",None),    # Request success but nothing in reponse    204:("204 No Content",None),    # For multi-redirect list page    300:("300 Multiple Choices",None),    # Redirect permanently    301:("301 Moved Permanently",None),    # Almost use as 303 in popular browser    302:("302 Found",None),    # Redirect to another URL using GET method (POST to current server)    303:("303 See Other",None),    # Resource same with browser cache    304:("304 Not Modified",None),    # Redirect to another URL and repeat request, browser do it parallel as posable    307:("307 Temporary Redirect",None),    # Same as 301, but it method not allow to change and do it parallel as posable    308:("308 Permanent Redirect",None),    # Can not process request, there are some problem in request data    400:("400 Bad Request","Some problem in your request. such as parameter or address missing"),    # Failed in request authorize    401:("401 Unauthorized","You must get authorize and retry your request"),    # Server refusing to response    403:("403 Forbidden","You are unable to access data. please contact webmaster"),    # Request data not found    404:("404 Not Found","Fail to process your request. please contact webmaster or try later"),    # Request method (POST or GET) not allowed    405:("405 Method Not Allowed","Your request not allowed. please contact webmaster"),    # Content not for accepted client    406:("406 Not Acceptable","Your request not allowed. please sign out and retry"),    # Request Timeout    408:("408 Request Timeout","Network is busy. please try your request later"),    # A jokes in RFC 2324 ^ ^    418:("418 I'm a teapot","I'm a teapot c<^>r~ ^ ^"),    # Out of server limited request    429:("429 Too Many Requests","Server is busy. please try your request later"),    # An error occur in server    500:("500 Internal Server Error","An error occurred in service program"),    # Request content not implemented    501:("501 Not Implemented","Fail to process your request. please contact webmaster"),    # Current server unavailable    503:("503 Service Unavailable","Unavailable request now")    }def htStatus(code):    return status[code][0]def htStatusUsr(code):    return status[code]def genMWStatus(code):    def mw_status(appmw):        def execute(env,rpo):            return appmw(env,lambda s,h: rpo(s or htStatus(code),h))        return execute    return mw_statusdef genMWMimetype(prefix,encode=None):    def genRpo(rpo):        def exrpo(s,h):            typestr=mimetypes[prefix]            if encode: typestr="%s;charset=%s" % (typestr,encode)            if h: h.append(("Content-Type",typestr))            else: h=[("Content-Type",typestr)]            return rpo(s,h)        return exrpo        def mw_status(appmw):        def execute(env,rpo):            return appmw(env,genRpo(rpo))        return execute    return mw_statusdef genMWOk():    return genMWStatus(200)RDTYPES = { # Redirect type name to HTTP status code    "fixed":301,    # Full name    "temp":302,    "repeat":307,    "repeat+":308,    "f":301,        # Simple name    "t":302,    "r":307,    "r+":308    }def genAppRedirect(url,rdtype):    if rdtype not in RDTYPES: return None    @genMWStatus(RDTYPES[rdtype])    def app_rdir(env,rpo):        io=rpo(None,[("Location",url)])        return (b"",)    return app_rdirdef genAppError(code,note):    if code<400 or code not in status: return None    @genMWStatus(code)    @genMWMimetype("html","utf-8")    def app_error(env,rpo):        statcode,statinfo = htStatusUsr(code)        io=rpo(None,None)        return (("""<!DOCTYPE html><html><head><title>Error</title></head><body><h1>%s</h1><hr /><p>%s</p><p>%s</p></body>""" % (statcode,statinfo,note)).encode("utf-8"),)    return app_error