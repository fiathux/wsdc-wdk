import sysimport reimport loggingimport logging.configimport os.pathimport timefrom WDK.WebGI.container.qconfig import confFactoryLOGLEVELS={"warning","warn","debug","error","info","critical"}LOGCONVERT={"localtime":time.localtime, "gmtime":time.gmtime}LOGHANDERS={"StreamHandler","FileHandler","SocketHandler","DatagramHandler"}LOGLIMITLEVEL={"NOTSET","DEBUG","INFO","WARNING","ERROR","CRITICAL"}CONFTRUE={"y","Y","yes","Yes","YES","true","True","TRUE"}CONFFALSE={"n","N","no","No","NO","false","False","FALSE"}class wdkInstanceExcpetion(Exception):pass# Instance class#conf : Instance configure#name : Instance name#root : Instance root path#path : Method for get sub path class WDKInstance(object):    def __init__(I,fileconf=None,strconf=None):        if fileconf:            if type(fileconf)==str: # default UTF-8                I.conf = confFactory(file=fileconf)            elif type(fileconf)==tuple: # With custom encode                conf=confFactory(file=fileconf[0],enc=fileconf[1])        elif strconf:            I.conf = confFactory(str=strconf)        else: I.conf = None        if not I.conf:            raise wdkInstanceExcpetion("Instance configure not found")        # Check instance configure        if not hasattr(I.conf,"instance"):            raise wdkInstanceExcpetion("Instance configure not found")        if not getattr(I.conf.instance,"name"):            raise wdkInstanceExcpetion("Instance configure error: [name]")        if not hasattr(I.conf.instance,"root"):            raise wdkInstanceExcpetion("Instance configure error: [root]")        if not hasattr(I.conf.instance,"path"):            raise wdkInstanceExcpetion("Instance configure error: [path]")        if not hasattr(I.conf.instance.path,"conf"):            raise wdkInstanceExcpetion("Instance configure error: [path.conf]")        if not hasattr(I.conf.instance.path,"cgi"):            raise wdkInstanceExcpetion("Instance configure error: [path.cgi]")        # Absolute path checker        abspath_parser = re.compile("^(([a-zA-Z]:/)|/)").match        # Normalize path parser        clearpath_parser = re.compile("^((([a-zA-Z]:/)|(//?))(.*[^/])?)/?$").match        # Check root path        rootchk = (not len(I.conf.instance.root) and "root path can not set empty") or \                (not abspath_parser(I.conf.instance.root) and "root must set absolute path")        if rootchk:  raise wdkInstanceExcpetion("Instance configure error: %s" % (rootchk,))        I.root = clearpath_parser(I.conf.instance.root).group(1)        # implemental 'path' method        abspath = lambda plce: (plce and abspath_parser(plce[0]) and plce) or \                (plce and "%s/%s" % (I.root,plce)) or I.root        I.path = lambda pn=None: (pn and hasattr(I.conf.instance.path,pn) and \                abspath(getattr(I.conf.instance.path,pn))) or (not pn and I.root)        # Apply instance name        I.name=I.conf.instance.name        sys.path.append(I.path("cgi"))        # Try initialize logger        logconf="%s/%s-%s" % (I.path("conf"),I.name,"log.conf")        if os.path.isfile(logconf):            I.__applyLoggconf(confFactory(file=logconf))        else:            I.__defaultLogger()    # Log printer    def log(I,msg,*argl,**argk):        global envbase        if "target" in argk: logger = logging.getLogger("%s.%s" % (I.name,argk["target"]))        else: logger = logging.getLogger(I.name)        ext=("extra" in argk and {k:v for k,v in argk["extra"].items()}) or {}        if "level" in argk and argk["level"] in LOGLEVELS:            logtalker = getattr(logger,argk["level"])        else:            logtalker = logger.debug        if "env" in argk: env=argk["env"]        else: env={}        ext["cntIP"]=("HTTP_X_REAL_IP" in env and env["HTTP_X_REAL_IP"]) or ("REMOTE_ADDR" in env and env["REMOTE_ADDR"]) or "<none IP>"        ext["cntPort"]=("REMOTE_PORT" in env and env["REMOTE_PORT"]) or "<none port>"        ext["cntMeth"]=("REQUEST_METHOD" in env and env["REQUEST_METHOD"]) or "<none method>"        ext["cntAgent"]=("HTTP_USER_AGENT" in env and env["HTTP_USER_AGENT"]) or "<none agent>"        ext["svrName"]=("SERVER_NAME" in env and env["SERVER_NAME"]) or "<none server>"        ext["svrPort"]=("SERVER_PORT" in env and env["SERVER_PORT"]) or "<none server port>"        ext["svrPath"]=("PATH_INFO" in env and env["PATH_INFO"]) or "<none location>"        logtalker(msg,*argl,extra = ext)    # Set default logger    def __defaultLogger(I):        logger=logging.getLogger(I.name)        fhandle=logging.FileHandler("%s/%s" % (I.path("log") or I.path(),"default.log"),                "w","utf-8")        fhandle.formatter=logging.Formatter("%(asctime)s %(levelname)s: - %(message)s")        logger.addHandler(fhandle)        logger.setLevel(logging.DEBUG)    # Apply logger configure    def __applyLoggconf(I,cnf):        # Generate log handlers        def genHandler(cfobj):            if "type" not in cfobj or cfobj["type"] not in LOGHANDERS:                print("type" not in cfobj)                hander=logging.StreamHandler(sys.stdout)            else:                if cfobj["type"]=="FileHandler": # Change log file path                    tmarg = eval(cfobj["init"])                    arg = ["%s/%s" % (I.path("log") or I.path(),tmarg[0].replace("/","_"))]                    arg.extend(tmarg[1:])                    hander = logging.FileHandler(*arg)                else:                    hander = getattr(logging,cfobj["type"])(*eval(cfobj["init"]))            if "formatter" in cfobj: fmt=logging.Formatter(cfobj["formatter"])            else: fmt=logging.Formatter("%(asctime)s %(levelname)s: - %(message)s")            if "time" in cfobj and cfobj["time"] in LOGCONVERT:                fmt.converter=LOGCONVERT[cfobj["time"]]            if "datefmt" in cfobj:                fmt.datefmt=cfobj["datefmt"]            hander.formatter=fmt            return hander        # Generate logger        def setLogger(name,handerlist,logconf):            logger=logging.getLogger(name)            if "handler" in logconf and logconf.handler in handerlist:                logger.addHandler(handerlist[logconf.handler])            if "level" in logconf: logger.level=getattr(logging,logconf.level)            if "propagate" in logconf and logconf.propagate in CONFTRUE:                logger.propagate=True            elif "propagate" in logconf and logconf.propagate in CONFFALSE:                logger.propagate=False                        dhandlers = { hk:genHandler(hv) for hk,hv in cnf.handler }        if "root" not in cnf: I.__defaultLogger()        else: setLogger(I.name,dhandlers,cnf.root)        for lk,lv in cnf.logger:            setLogger("%s.%s" % (I.name,lk),dhandlers,lv)# Create new instancedef init(fileconf=None,strconf=None):    return WDKInstance(fileconf,strconf)    