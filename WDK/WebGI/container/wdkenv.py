import timeclass basicEnv(object):    def __init__(I):        I.env=None        I.static={}        I.current=None        I.timestamp=None    def begin(I,env):        I.env=env        I.current={}        I.timestamp=time.time()        return I    def addStatic(I,name,value=None):        I.static[name]=value    def rmStatic(I,name):        del I.static[name]    def getStatic(I,name):        return I.static[name] if name in I.static else None    def getRequest(I,name):        container=(name in I.current and I.current) or (name in I.env and I.env)        return container[name] if container else None    def __getitem__(I,name):        if I.current is None: raise Exception("Enviroment not initialize")        if name in I.current: return I.current[name]        elif name in I.env: return I.env[name]        elif name in I.static: return I.static[name]        else: raise Exception("Key error")    def __setitem__(I,name,value):        I.current[name]=value    def __iter__(I):        return I.values()    def __contains__(I,name):        return name in I.current or name in I.env or name in I.static    def unixTime(I):        return I.timestamp    def webTime(I,tm=None):        return time.strftime("%a, %d %b %Y %H:%M:%S GMT",time.gmtime(tm or I.timestamp))    def keys(I):        return set().union(set(I.current.keys()),set(I.env.keys()),set(I.static.keys()))    def values(I):        return map(lambda k: I[k], I.keys())    def items(I):        return map(lambda k: (k,I[k]), I.keys())        