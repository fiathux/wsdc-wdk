from flowproxy.server import baseIFimport threadingimport timeimport reimport socketimport uuid############################################# Support ############################################## Create string format modelingdef CreateFormat(fmtStr):    qw={"0","1","2","3","4","5","6","7","8","9","."} # Quantifier of matched    def itrFStr(fstr):        s=0 # Start Position        f=0 # Flag matched(0 not matched, 1 begin, 2 end, 10 shift)        for i in range(0,len(fstr)):            if f>1:                if f==2: yield fstr[s:i]                elif f==10: yield "%"                f=0                s=i            if fstr[i]=='%' and not f: # Matched format string                f=1                if s!=i: yield fstr[s:i]                s=i            elif fstr[i]=='%' and f: # Exception or shift                if i-s == 1: f=10 #Set shift                else:                    yield fstr[s:i]                    s=i            elif f and not fstr[i] in qw: # Match quantifier                f=2        yield fstr[s:len(fstr)]    def genMod(li): # Output modeling        def formater(in_str,fmtgrp):            if (not in_str) or (in_str[0]!="%") or (in_str=="%") or \            (in_str[-1] in qw) or not in_str[-1] in fmtgrp: return in_str            else: return fmtgrp[in_str[-1]](in_str[1:-1])        def rfunc(fmtgrp): # Modeling result            return "".join([formater(itm,fmtgrp) for itm in li])        return rfunc    return genMod([perf for perf in itrFStr(fmtStr)])# Create datetime format modeling'''<ftm> is a string,it same as time.strftime<zone> may set follow format: UTC/GMT/GMT+X/GMT-X. set empty for local time. if append "!" to tailof string, will append timezone information to datetime.'''def CreateNowTime(fmt,zone):    class UnknowTZException(Exception):        def __init__(me,zstr):            me.body=zstr        def __str__(me):            return "Unknow timezone string : \"%s\"" % me.body    def parseZone(zonename):        zn=zonename.strip().upper()        if not zn: return time.timezone,time.tzname[0],False        zname="GMT"     # Timezone name        fix=0           # Timezone fix seconds        isdisp = zn[-1]=="!"    # Switch display timezone        if isdisp: zn=zn[:-1]        if not zn: return time.timezone,time.tzname[0],isdisp        if zn=="GMT" or zn=="UTC": return 0,zn,isdisp        if zn[:3]=="GMT": zn=zn[3:]        zonefx = re.match("^([+-]*)([0-9]{1,2})$",zn)        if zonefx:            zonefx=zonefx.groups()            fxsig=zonefx[0]=="-"            fxhour=int(zonefx[1])            if fxhour==0: return 0,"GMT",isdisp            if fxhour<12:                fxsec = (fxsig and fxhour*3600) or fxhour*-3600                fxname = "GMT%s%d" % ((fxsig and "-") or "+",fxhour)                return fxsec,fxname,isdisp        raise UnknowTZException(zonename)    def genMod(tfmt,zoneset):         def rfunc():            tm=time.strftime(fmt,time.gmtime(time.time()-zoneset[0]))            return (zoneset[2] and "%s %s"%(tm,zoneset[1])) or tm        return rfunc    return genMod(fmt,parseZone(zone))# Create log data modelingdef CreateLogOut(fmt,fmtdate,tzone):    dateF=CreateNowTime(fmtdate,tzone)    host=socket.gethostname()    logF=CreateFormat(fmt)    def nzlevelname(name):        return "".join((name[0].upper(),name[1:]))    def rfunc(text,level):        inftab={"D":lambda q:dateF(),                "H":lambda q:host,                "L":lambda q:nzlevelname(level[0]),                "l":lambda q:str(level[1]),                "C":lambda q:text}        return logF(inftab)    return rfunc############################################ Main part ############################################class SvrLogger(baseIF):    def _init(me,argdict,arglist):        me.__maxsize=("maxsize" in argdict and argdict["maxsize"]) or 20971520  # (Byte)        me.__filelife=("filelife" in argdict and argdict["filelife"]) or 1440   # (Minute)        me.__backuplife=("backuplife" in argdict and argdict["backuplife"]) or 168  # (Hour)        me.__format=("format" in argdict and argdict["format"]) or "%D %H: %L [%l]: %C"        '''        Log format string:        %C      log content        %D      datatime        %H      hostname        %L      log-level name        %l      log-level code        %%      %        '''        me.__f_date=("f_date" in argdict and argdict["f_date"]) or "%b %d %H:%M:%S"        me.__timezone=("timezone" in argdict and argdict["timezone"]) or "!"        me.__logpath=("logpath" in argdict and argdict["logpath"]) or "./"        me.__files=("files" in argdict and argdict["files"]) or ()        me.__filewrite=[0 for i in range(0,48)] # File target of every log-level        me.__outputenable=[True for i in range(0,48)] # Specified log-level output enable        me.__level2name=[me.__defaultLevelMap(lv) for lv in range(0,48)]        me.__name2level={ "custom":1, "debug":16, "hint":24, "warning":32, "error":40 }        '''        Default log-level:        - level -       - code -        - default-        unknow          0               0        custom          1...15          1        debug           16...23         16        hint            24...31         24        warning         32...39         32        error           40...47         40        '''        me.__logger=CreateLogOut(me.__format, me.__f_date, me.__timezone)        me.__fileLock=threading.Lock()      # File write lock    def _msg(me,data,source):pass    @staticmethod    def __defaultLevelMap(code):        if code>47: return "unkonw"        elif code>=40: return "error"        elif code>=32: return "warning"        elif code>=24: return "hint"        elif code>=16: return "debug"        elif code>0: return "custom"        else: return "unkonw"    # Manually output    def logging(me,text,level="debug"):pass    # Set message push rule    def setSendLevel(me,codes,enable):pass    # Set file write rule    def setFileLevel(me,codes,fileindex):pass    # Custom level name    def setLevelName(me,codes,name):pass    # Change log format    def setFormat(me,fmt):pass    # Change time format    def setTimeFormat(me,fmt):pass    # Change time zone    def setTimeZone(me,zone):pass